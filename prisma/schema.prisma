datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum RoleUser {
  ADMIN
  SUPERADMIN
}

enum TypeGQL {
  MUTATION
  QUERY
}

model Users {
  id     String        @id @default(uuid())
  role  String @db.VarChar(40)
  groups   Groups @relation("Users_Groups", fields: [role], references: [id])
  shopsId String @db.VarChar(40)
  shops   Shops @relation("Users_Shops", fields: [shopsId], references: [id])
  username String 
  password String?
  isSuperAdmin Boolean? @default(false)
  email String? @unique
  isRegistered Boolean? @default(true)
  picture String?
  // accessToken  Boolean? @default(false)
  refreshToken String? @db.VarChar(300)
  deleted Boolean @default(false)
  deviceId String?
  createdBy String
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shops {
  id     String        @id @default(uuid())
  name String @unique
  description String?
  createdBy String 
  updatedBy String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users Users[] @relation("Users_Shops")
  groups Groups[] @relation("Groups_Shops")
  groupTasks GroupTasks[] @relation("GroupTasks_Shops")
  
}

model GroupFunctions {
  id     String        @id @default(uuid())
  name String @unique
  functionId String 
  functions   Functions @relation("GroupFunctions_Functions", fields: [functionId], references: [id])
  groupId String
  groups   Groups @relation("GroupFunctions_Groups", fields: [groupId], references: [id])
  create Boolean @default(false)
  view Boolean @default(false)
  update Boolean @default(false)
}

model Functions {
  id     String        @id @default(uuid())
  name String @unique
  groupFunctions GroupFunctions[] @relation("GroupFunctions_Functions")
  tasks Tasks[] @relation("Tasks_Functions")
}

model Groups {
  id     String        @id @default(uuid())
  name String @unique
  shopsId String @db.VarChar(40)
  shops   Shops @relation("Groups_Shops", fields: [shopsId], references: [id])
  groupFunctions GroupFunctions[] @relation("GroupFunctions_Groups")
  users Users[] @relation("Users_Groups") 
  groupTasks GroupTasks[] @relation("GroupTasks_Groups")
}


model Tasks {
  id String @id @default(uuid())
  name String @unique
  functionId String @db.VarChar(40)
  description String?
  functions   Functions @relation("Tasks_Functions", fields: [functionId], references: [id])
  groupTasks GroupTasks[] @relation("GroupTasks_Tasks")
  apiTasks ApiTasks[] @relation("ApiTasks_Tasks")
}

model GroupTasks {
  id String @id @default(uuid())
  name String @unique
  groupId String
  groups   Groups @relation("GroupTasks_Groups", fields: [groupId], references: [id])
  taskId String
  tasks   Tasks @relation("GroupTasks_Tasks", fields: [taskId], references: [id])
  shopsId String @db.VarChar(40)
  shops   Shops @relation("GroupTasks_Shops", fields: [shopsId], references: [id])
  createdBy String
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuthGuardApis {
  id String @id @default(uuid())
  name String @unique
  type TypeGQL
  class String
  scopesApisId String
  scopesApis   ScopesApis @relation("AuthGuardApis_ScopesApis", fields: [scopesApisId], references: [id])
}

model ScopesApis {
  id String @id @default(uuid())
  name String @unique
  service String?
  authGuardApis AuthGuardApis[] @relation("AuthGuardApis_ScopesApis")
  apiTasks ApiTasks[] @relation("ApiTasks_ScopesApis")
}

model ApiTasks {
 id String @id @default(uuid())
 name String @unique
 scopesApisId String
 scopesApis   ScopesApis @relation("ApiTasks_ScopesApis", fields: [scopesApisId], references: [id])
 taskId String
 tasks   Tasks @relation("ApiTasks_Tasks", fields: [taskId], references: [id])
}