/**
* This file is auto-generated by nestjs-proto-gen-ts
*/
import * as google from 'google-protobuf'
import { ApiProperty } from '@nestjs/swagger'
import { Metadata } from '@grpc/grpc-js'

const enumType = (o) => Object.keys(o).filter(k => Number.isNaN(parseInt(k)))

export namespace auth {
    export class CreateSubUserRequest {
        @ApiProperty({ type: () => String }) role?: string;
        @ApiProperty({ type: () => String }) username?: string;
        @ApiProperty({ type: () => String }) email?: string;
        @ApiProperty({ type: () => String }) shopId?: string;
        @ApiProperty({ type: () => String }) userId?: string;
    }
    export class GetPermissionrRequest {
        @ApiProperty({ type: () => String }) shopsId?: string;
    }
    export class CreateSubUserResponse {
        @ApiProperty({ type: () => String }) id?: string;
    }
    export class GetPermissionResponse {
        @ApiProperty({ type: () => auth.Shop }) shop?: auth.Shop;
        @ApiProperty({ type: () => [auth.Function] }) functions?: auth.Function[];
        @ApiProperty({ type: () => [auth.Task] }) tasks?: auth.Task[];
    }
    export class Shop {
        @ApiProperty({ type: () => String }) id?: string;
        @ApiProperty({ type: () => String }) name?: string;
        @ApiProperty({ type: () => String }) description?: string;
        @ApiProperty({ type: () => String }) createdBy?: string;
        @ApiProperty({ type: () => String }) updatedBy?: string;
        @ApiProperty({ type: () => String }) createdAt?: string;
        @ApiProperty({ type: () => String }) updatedAt?: string;
        @ApiProperty({ type: () => [auth.Group] }) groups?: auth.Group[];
        @ApiProperty({ type: () => [auth.User] }) users?: auth.User[];
    }
    export class Group {
        @ApiProperty({ type: () => String }) id?: string;
        @ApiProperty({ type: () => String }) name?: string;
        @ApiProperty({ type: () => String }) shopsId?: string;
        @ApiProperty({ type: () => [auth.GroupFunction] }) groupFunctions?: auth.GroupFunction[];
        @ApiProperty({ type: () => [auth.GroupTask] }) groupTasks?: auth.GroupTask[];
    }
    export class GroupFunction {
        @ApiProperty({ type: () => String }) id?: string;
        @ApiProperty({ type: () => String }) name?: string;
        @ApiProperty({ type: () => String }) functionId?: string;
        @ApiProperty({ type: () => String }) groupId?: string;
        @ApiProperty({ type: () => Boolean }) create?: boolean;
        @ApiProperty({ type: () => Boolean }) view?: boolean;
        @ApiProperty({ type: () => Boolean }) update?: boolean;
    }
    export class GroupTask {
        @ApiProperty({ type: () => String }) id?: string;
        @ApiProperty({ type: () => String }) name?: string;
        @ApiProperty({ type: () => String }) groupId?: string;
        @ApiProperty({ type: () => String }) taskId?: string;
        @ApiProperty({ type: () => String }) shopsId?: string;
        @ApiProperty({ type: () => String }) createdBy?: string;
        @ApiProperty({ type: () => String }) updatedBy?: string;
        @ApiProperty({ type: () => String }) createdAt?: string;
        @ApiProperty({ type: () => String }) updatedAt?: string;
    }
    export class User {
        @ApiProperty({ type: () => String }) id?: string;
        @ApiProperty({ type: () => String }) role?: string;
        @ApiProperty({ type: () => String }) shopsId?: string;
        @ApiProperty({ type: () => String }) username?: string;
        @ApiProperty({ type: () => String }) email?: string;
        @ApiProperty({ type: () => String }) picture?: string;
        @ApiProperty({ type: () => String }) createdBy?: string;
    }
    export class Function {
        @ApiProperty({ type: () => String }) id?: string;
        @ApiProperty({ type: () => String }) name?: string;
    }
    export class Task {
        @ApiProperty({ type: () => String }) id?: string;
        @ApiProperty({ type: () => String }) name?: string;
        @ApiProperty({ type: () => String }) functionId?: string;
        @ApiProperty({ type: () => String }) description?: string;
    }
    export interface AuthGrpcService {
        createSubUser(data: CreateSubUserRequest, metadata?: Metadata): Promise<CreateSubUserResponse>;
        getPermission(data: GetPermissionrRequest, metadata?: Metadata): Promise<GetPermissionResponse>;
    }
    // tslint:disable-next-line:no-empty-interface
    export class EmptyRequest {
    }
    export enum ServingStatus {
        UNKNOWN = 0,
        SERVING = 1,
        NOT_SERVING = 2,
    }
    export class HealthCheckRequest {
        @ApiProperty({ type: () => String }) service?: string;
    }
    export class HealthCheckResponse {
        @ApiProperty({ type: () => String, enum: enumType(auth.ServingStatus), enumName: "ServingStatus" }) status?: auth.ServingStatus;
    }
    export interface Health {
        check(data: HealthCheckRequest, metadata?: Metadata): Promise<HealthCheckResponse>;
    }
}

